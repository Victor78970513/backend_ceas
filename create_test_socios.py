#!/usr/bin/env python3
"""
Script para crear 50 socios de prueba con datos realistas
Este script genera socios con informaci√≥n variada para testing del frontend
"""

import psycopg2
from config import DATABASE_URL
import random
from datetime import datetime, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Datos para generar socios realistas
NOMBRES = [
    "Carlos", "Mar√≠a", "Jos√©", "Ana", "Luis", "Carmen", "Antonio", "Isabel", "Manuel", "Pilar",
    "Francisco", "Dolores", "Juan", "Teresa", "Pedro", "Rosa", "Miguel", "Francisca", "√Ångel", "Concepci√≥n",
    "Rafael", "Antonia", "Jes√∫s", "Mercedes", "Alejandro", "Rosario", "Fernando", "Encarnaci√≥n", "Joaqu√≠n", "Carmen",
    "Diego", "Josefa", "Sergio", "Mar√≠a", "Rub√©n", "Ana", "V√≠ctor", "Isabel", "Iv√°n", "Pilar",
    "√ìscar", "Dolores", "Ra√∫l", "Teresa", "Rub√©n", "Rosa", "Adri√°n", "Francisca", "Mario", "Concepci√≥n"
]

APELLIDOS = [
    "Garc√≠a", "Rodr√≠guez", "Gonz√°lez", "Fern√°ndez", "L√≥pez", "Mart√≠nez", "S√°nchez", "P√©rez", "G√≥mez", "Mart√≠n",
    "Jim√©nez", "Ruiz", "Hern√°ndez", "D√≠az", "Moreno", "Mu√±oz", "√Ålvarez", "Romero", "Alonso", "Guti√©rrez",
    "Navarro", "Torres", "Dom√≠nguez", "V√°zquez", "Ramos", "Gil", "Ram√≠rez", "Serrano", "Blanco", "Su√°rez",
    "Molina", "Morales", "Ortega", "Delgado", "Castro", "Ortiz", "Rubio", "Mar√≠n", "Sanz", "Iglesias",
    "Medina", "Cort√©s", "Castillo", "Garrido", "Santos", "Guerrero", "Lozano", "Cantero", "Prieto", "M√©ndez"
]

TIPOS_MEMBRESIA = ["B√°sica", "Premium", "VIP", "Gold", "Platinum", "Elite"]
ESTADOS_SOCIO = [1, 2]  # 1 = activo, 2 = inactivo (con m√°s probabilidad de activos)
CIUDADES = [
    "La Paz", "Santa Cruz", "Cochabamba", "Sucre", "Oruro", "Potos√≠", "Tarija", "Trinidad", "Cobija", "Riberalta"
]

DIRECCIONES = [
    "Av. 16 de Julio", "Calle Comercio", "Av. 6 de Agosto", "Calle Potos√≠", "Av. Mariscal Santa Cruz",
    "Calle Linares", "Av. Ballivi√°n", "Calle Sag√°rnaga", "Av. Montes", "Calle Ja√©n",
    "Av. Arce", "Calle Murillo", "Av. Camacho", "Calle Ayacucho", "Av. Villaz√≥n",
    "Calle Sucre", "Av. Per√∫", "Calle Yanacocha", "Av. Pando", "Calle Tarapac√°"
]

def generar_telefono():
    """Genera un n√∫mero de tel√©fono boliviano realista"""
    prefijos = ["2", "3", "4", "7"]
    prefijo = random.choice(prefijos)
    numero = ''.join([str(random.randint(0, 9)) for _ in range(7)])
    return f"{prefijo}{numero}"

def generar_ci_nit():
    """Genera un CI/NIT boliviano realista"""
    ci = ''.join([str(random.randint(0, 9)) for _ in range(7)])
    return ci

def generar_fecha_nacimiento():
    """Genera una fecha de nacimiento entre 18 y 65 a√±os"""
    edad = random.randint(18, 65)
    fecha_base = datetime.now() - timedelta(days=edad * 365)
    # Agregar variaci√≥n de d√≠as
    variacion = random.randint(-30, 30)
    fecha = fecha_base + timedelta(days=variacion)
    return fecha.strftime("%Y-%m-%d")

def generar_direccion():
    """Genera una direcci√≥n realista"""
    direccion = random.choice(DIRECCIONES)
    numero = random.randint(1, 9999)
    zona = random.choice(["Zona Centro", "Zona Norte", "Zona Sur", "Zona Este", "Zona Oeste", "Zona Sur", "Zona Central"])
    return f"{direccion} {numero}, {zona}"

def crear_socios_prueba():
    """Crea 50 socios de prueba con datos realistas"""
    
    try:
        # Conectar a la base de datos
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        logger.info("üë• Creando 50 socios de prueba...")
        
        socios_creados = 0
        errores = 0
        
        for i in range(50):
            try:
                # Generar datos √∫nicos para cada socio
                nombre = random.choice(NOMBRES)
                apellido = random.choice(APELLIDOS)
                segundo_apellido = random.choice(APELLIDOS)
                
                # Evitar apellidos duplicados
                while segundo_apellido == apellido:
                    segundo_apellido = random.choice(APELLIDOS)
                
                nombres_completos = f"{nombre} {apellido} {segundo_apellido}"
                apellidos_completos = f"{apellido} {segundo_apellido}"
                
                ci_nit = generar_ci_nit()
                telefono = generar_telefono()
                correo = f"{nombre.lower()}.{apellido.lower()}{i+1}@gmail.com"
                direccion = generar_direccion()
                estado = random.choices(ESTADOS_SOCIO, weights=[80, 20])[0]  # 80% activos, 20% inactivos
                tipo_membresia = random.choice(TIPOS_MEMBRESIA)
                fecha_nacimiento = generar_fecha_nacimiento()
                
                # Insertar socio
                cursor.execute("""
                    INSERT INTO socio (
                        id_club, nombres, apellidos, ci_nit, telefono, 
                        correo_electronico, direccion, estado, fecha_nacimiento, 
                        tipo_membresia
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    RETURNING id_socio
                """, (
                    1,  # id_club (Club por defecto)
                    nombres_completos,
                    apellidos_completos,
                    ci_nit,
                    telefono,
                    correo,
                    direccion,
                    estado,
                    fecha_nacimiento,
                    tipo_membresia
                ))
                
                socio_id = cursor.fetchone()[0]
                socios_creados += 1
                
                if socios_creados % 10 == 0:
                    logger.info(f"‚úÖ {socios_creados}/50 socios creados...")
                
            except psycopg2.Error as e:
                errores += 1
                logger.warning(f"‚ö†Ô∏è  Error creando socio {i+1}: {e}")
                conn.rollback()
                continue
        
        # Confirmar transacciones
        conn.commit()
        
        logger.info(f"\nüìä RESUMEN DE CREACI√ìN:")
        logger.info(f"‚úÖ Socios creados exitosamente: {socios_creados}")
        logger.info(f"‚ùå Errores: {errores}")
        logger.info(f"üìà Total procesados: {socios_creados + errores}")
        
        # Verificar socios creados
        cursor.execute("SELECT COUNT(*) FROM socio")
        total_socios = cursor.fetchone()[0]
        logger.info(f"üìã Total de socios en la base de datos: {total_socios}")
        
        # Mostrar algunos ejemplos
        cursor.execute("""
            SELECT nombres, apellidos, ci_nit, telefono, correo_electronico, tipo_membresia, estado
            FROM socio 
            ORDER BY id_socio DESC 
            LIMIT 5
        """)
        
        ejemplos = cursor.fetchall()
        
        logger.info(f"\nüîç EJEMPLOS DE SOCIOS CREADOS:")
        logger.info("=" * 80)
        for ejemplo in ejemplos:
            estado_texto = "Activo" if ejemplo[6] == 1 else "Inactivo"
            logger.info(f"üë§ {ejemplo[0]} {ejemplo[1]} | CI: {ejemplo[2]} | Tel: {ejemplo[3]}")
            logger.info(f"   üìß {ejemplo[4]} | Membres√≠a: {ejemplo[5]} | Estado: {estado_texto}")
            logger.info("-" * 80)
        
        # Estad√≠sticas por tipo de membres√≠a
        cursor.execute("""
            SELECT tipo_membresia, COUNT(*) as cantidad
            FROM socio 
            GROUP BY tipo_membresia
            ORDER BY cantidad DESC
        """)
        
        estadisticas = cursor.fetchall()
        
        logger.info(f"\nüìà DISTRIBUCI√ìN POR TIPO DE MEMBRES√çA:")
        logger.info("=" * 40)
        for stat in estadisticas:
            logger.info(f"üèÜ {stat[0]}: {stat[1]} socios")
        
        # Estad√≠sticas por estado
        cursor.execute("""
            SELECT 
                CASE WHEN estado = 1 THEN 'Activo' ELSE 'Inactivo' END as estado_texto,
                COUNT(*) as cantidad
            FROM socio 
            GROUP BY estado
            ORDER BY estado
        """)
        
        estados = cursor.fetchall()
        
        logger.info(f"\nüìä DISTRIBUCI√ìN POR ESTADO:")
        logger.info("=" * 30)
        for estado in estados:
            logger.info(f"üîµ {estado[0]}: {estado[1]} socios")
        
        cursor.close()
        conn.close()
        
        logger.info(f"\nüéâ ¬°CREACI√ìN DE SOCIOS COMPLETADA!")
        logger.info("=" * 50)
        logger.info("üí° Los socios est√°n listos para usar en tu frontend")
        logger.info("üåê Puedes probar los endpoints:")
        logger.info("   GET /socios/ - Ver todos los socios")
        logger.info("   GET /socios/{id} - Ver socio espec√≠fico")
        logger.info("   POST /socios/ - Crear nuevo socio")
        logger.info("=" * 50)
        
        return True
        
    except psycopg2.Error as e:
        logger.error(f"‚ùå Error de base de datos: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error general: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ CREANDO 50 SOCIOS DE PRUEBA PARA FRONTEND")
    print("=" * 70)
    
    if crear_socios_prueba():
        print("\n‚úÖ Socios de prueba creados exitosamente")
        print("üéØ Perfectos para testing del frontend")
    else:
        print("\n‚ùå Error creando socios de prueba")
        import sys
        sys.exit(1)

if __name__ == "__main__":
    main()
